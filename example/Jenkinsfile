pipeline {
  agent any
  stages {
    stage('Initialize') {
      steps {
        script {
          name = "P.Anh 1"
          def lib = library('helperlib').helpers
          helper = lib.UnitTestReportHepler.new()
        }

      }
    }

    stage('Hello') {
      parallel {
        stage('Hello') {
          steps {
            echo "Hello ${name}"
          }
        }

        stage('Call a lib') {
          steps {
            script {
              name = "atr"
            }

            echo "Hello ${name}"
            script {
              def remote = ["host": "192.168.1.77", "allowAnyHosts": true]
              withCredentials([sshUserPrivateKey(credentialsId: 'build-server-window', keyFileVariable: 'identity', passphraseVariable: '', usernameVariable: 'userName')]) {
                remote.user = userName
                remote.name = userName
                remote.identityFile = identity

                sshCommand remote: remote, command: "echo 1"
              }

              withCredentials([sshUserPrivateKey(credentialsId: 'build-server-window', keyFileVariable: 'identity', passphraseVariable: '', usernameVariable: 'userName')]) {
                remote.user = userName
                remote.name = userName
                remote.identityFile = identity

                sshCommand remote: remote, command: "echo 1"
              }
              echo 'Do something'
              echo 'Do something'
              echo 'Do something'
            }

          }
        }

      }
    }

  }
  environment {
    var1 = 'a1'
  }
}
